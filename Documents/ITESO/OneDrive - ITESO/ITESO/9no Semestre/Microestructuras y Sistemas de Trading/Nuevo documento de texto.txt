
"""
# -- --------------------------------------------------------------------------------------------------- -- #
# -- project: A SHORT DESCRIPTION OF THE PROJECT                                                         -- #
# -- script: main.py : python script with the main functionality                                         -- #
# -- author: oscaralfonso17                                                                              -- #
# -- license: GPL-3.0 License                                                                            -- #
# -- repository: https://github.com/oscaralfonso17/myst_if710183_lab1.git                                -- #
# -- --------------------------------------------------------------------------------------------------- -- #
"""
from functions import *
from visualizations import *

# data.py: Obtener la lista de archivos a leer
files = read_files()

# data.py: Leer todos los archivos y guardarlos en un diccionario
datos_dict = data_dict(files)

# functions.py: Construir el vector de fechas a partir del vector de nombres de archivos
dates = t_dates(files)
days = pd.date_range(start=t_dates(files)[0], end=t_dates(files)[-1])  # Vector de dias
days = days.strftime('%Y-%m-%d')

# functions.py: Construir el vector de tickers utilizables en yahoo finance
tickers = glob_tickers(files)

# functions.py: Descargar y acomodar todos los precios históricos
prices = yahoo_prices(files)
m_prices = monthly_prices(prices, files)
d_prices = daily_prices(prices, files)

# main.py: Posicion inicial: Inversion pasiva
k = 1000000.00  # capital
c = 0.00125  # comisiones
comisiones = [0]  # Lista de comisiones

c_activos = ['KOFL', 'KOFUBL', 'BSMXB', 'MXN', 'USD']  # Los % de c_activos asignarlos a CASH

inv_pasiva = {'timestamp': ['30-01-2018'], 'capital': [k]}

# INVERSION PASIVA
# main.py: Inversion pasiva
# empatar Tickers iniciales
pos_datos = data_dict(files)[files[0]].copy().sort_values('Ticker')[['Ticker', 'Peso (%)']]
# extraer la lista de activos a eliminar
i_activos = list(pos_datos[list(pos_datos['Ticker'].isin(c_activos))].index)
# eliminar los activos del dataframe
pos_datos.drop(i_activos, inplace=True)
# resetear el index
pos_datos.reset_index(inplace=True, drop=True)
# agregar .MX a los Tickers
pos_datos['Ticker'] = pos_datos['Ticker'] + '.MX'
# correccion de datos
pos_datos['Ticker'] = pos_datos['Ticker'].replace('GFREGIOO.MX', 'RA.MX')
pos_datos['Ticker'] = pos_datos['Ticker'].replace('MEXCHEM.MX', 'ORBIA.MX')
pos_datos['Ticker'] = pos_datos['Ticker'].replace('LIVEPOLC.1.MX', 'LIVEPOLC-1.MX')

# precios necesarios para la posicion
pos_datos['Precio'] = (np.array([m_prices.iloc[0, m_prices.columns.to_list().index(i)] for i in pos_datos['Ticker']]))
# capital destinado por accion = proporcion de capital - comisiones por la posicion
pos_datos['Capital'] = np.round(pos_datos['Peso (%)'] * k - pos_datos['Peso (%)'] * k * c, 2)
pos_datos['Titulos'] = pos_datos['Capital']//pos_datos['Precio']
pos_datos['Comision'] = pos_datos['Precio'] * pos_datos['Titulos'] * c
pos_datos['Postura'] = pos_datos['Titulos'] * pos_datos['Precio']
# Cash fijo
cash = np.round(k-pos_datos['Postura'].sum()-pos_datos['Comision'].sum(), 2)
# Listas con valores
inv_pasiva['capital'].append(k-pos_datos['Comision'].sum())
comisiones.append(sum(pos_datos['Comision']))
inv_pasiva['timestamp'].append(dates[0])
# meses restantes
for a in range(1, len(dates)):
    pos_datos['Precio'] = np.round(np.array([m_prices.iloc[a, m_prices.columns.to_list().index(i)] for
                                             i in pos_datos['Ticker']]), 2)
    pos_datos['Comision'] = 0  # ya no hay comisiones
    pos_datos['Postura'] = np.round(pos_datos['Titulos'] * pos_datos['Precio'], 2)

    inv_pasiva['capital'].append(np.round(sum(pos_datos['Postura']) + cash, 2))
    comisiones.append(sum(pos_datos['Comision']))
    inv_pasiva['timestamp'].append(dates[a])

df_pasiva = pd.DataFrame()
df_pasiva['timestamp'] = inv_pasiva['timestamp']
df_pasiva['capital'] = np.round(inv_pasiva['capital'], 2)

df_pasiva['rend'] = 0
df_pasiva['rend_acum'] = 0
for i in range(1, len(df_pasiva)):
    df_pasiva.loc[i, 'rend'] = np.round(np.log(df_pasiva.loc[i, 'capital'] / df_pasiva.loc[i - 1, 'capital']), 4)
    df_pasiva.loc[i, 'rend_acum'] = np.round(df_pasiva.loc[i - 1, 'rend_acum'] + df_pasiva.loc[i, 'rend'], 4)
# print(df_pasiva)

# visualization.py: grafica de evolucion del capital
pasiva_graph = graph(x=df_pasiva['timestamp'], y=df_pasiva['capital'],
                     title="Inversión Pasiva: "+str(inv_pasiva['timestamp'][1])+" a "+str(inv_pasiva['timestamp'][-1]),
                     x_title='Dates', y_title="Capital")
# pasiva_graph.show()

# INVERSION ACTIVA
x_per = 0.01
kc = 0.1

# main.py: inversion activa: mismo inicio que inv_pasiva
inv_activa = {'timestamp': ['30-01-2018'], 'capital': [k]}
ops_inv_activa = {'timestamp': [], 'titulos_t': [], 'titulos_c': [], 'precio': [], 'comision': []}
pos_datos = data_dict(files)[files[0]].copy().sort_values('Ticker')[['Ticker', 'Peso (%)']]
i_activos = list(pos_datos[list(pos_datos['Ticker'].isin(c_activos))].index)
pos_datos.drop(i_activos, inplace=True)
pos_datos.reset_index(inplace=True, drop=True)
pos_datos['Ticker'] = pos_datos['Ticker'] + '.MX'
pos_datos['Ticker'] = pos_datos['Ticker'].replace('GFREGIOO.MX', 'RA.MX')
pos_datos['Ticker'] = pos_datos['Ticker'].replace('MEXCHEM.MX', 'ORBIA.MX')
pos_datos['Ticker'] = pos_datos['Ticker'].replace('LIVEPOLC.1.MX', 'LIVEPOLC-1.MX')
# encontrar el activo con mayor ponderacion (AMXL)
peso_max = pos_datos['Peso (%)'].idxmax()

pos_datos['Precio'] = np.round(np.array([d_prices.iloc[0, d_prices.columns.to_list().index(i)] for
                                         i in pos_datos['Ticker']]), 2)
pos_datos['Capital'] = np.round(pos_datos['Peso (%)'] * k - pos_datos['Peso (%)'] * k * c, 2)

pos_datos.loc[peso_max, 'Capital'] = pos_datos.loc[peso_max, 'Capital']/2   # LIMITE AL 50%

pos_datos['Titulos'] = pos_datos['Capital']//pos_datos['Precio']
pos_datos['Comision'] = np.round(pos_datos['Precio'] * pos_datos['Titulos'] * c, 2)
pos_datos['Postura'] = pos_datos['Titulos'] * pos_datos['Precio']
pos_datos['Precio_ant'] = pos_datos['Precio']

cash = np.round(k-pos_datos['Postura'].sum()-pos_datos['Comision'].sum(), 2)

inv_activa['capital'].append(k-pos_datos['Comision'].sum())
comisiones.append(sum(pos_datos['Comision']))

inv_activa['timestamp'].append(days[0])
ops_inv_activa['timestamp'].append(days[0])
ops_inv_activa['titulos_t'].append(pos_datos.loc[peso_max, 'Titulos'])
ops_inv_activa['titulos_c'].append(pos_datos.loc[peso_max, 'Titulos'])
ops_inv_activa['precio'].append(pos_datos.loc[peso_max, 'Precio'])
ops_inv_activa['comision'].append(pos_datos.loc[peso_max, 'Comision'])

for a in range(1, len(d_prices)):  # len(d_prices)
    pos_datos['Precio'] = np.round(np.array([d_prices.iloc[a, d_prices.columns.to_list().index(i)] for
                                             i in pos_datos['Ticker']]), 2)
    pos_datos['Comision'] = 0  # ya no hay comisiones en los meses restantes

    dif = np.log(pos_datos.loc[peso_max, 'Precio'] / pos_datos.loc[peso_max, 'Precio_ant'])
    comprados = pos_datos.loc[peso_max, 'Titulos']

    if dif > x_per:
        if (cash * kc - cash * kc * c) // pos_datos.loc[peso_max, 'Precio'] > 0:
            cash = cash - (cash * kc - cash * kc * c)  # gastamos el 10% del cash en titulos
            pos_datos.loc[peso_max, 'Capital'] = pos_datos.loc[peso_max, 'Capital'] + (cash * kc - cash * kc * c)

            titulos = pos_datos.loc[peso_max, 'Titulos']
            comprados = (cash * kc - cash * kc * c) // pos_datos.loc[peso_max, 'Precio']

            n_titulos = comprados + titulos

            pos_datos.loc[peso_max, 'Titulos'] = n_titulos

            pos_datos.loc[peso_max, 'Comision'] = np.round(pos_datos.loc[peso_max, 'Precio'] * (comprados) * c, 2)

            ops_inv_activa['timestamp'].append(str(d_prices.index[a].strftime('%Y-%m-%d')))
            ops_inv_activa['titulos_t'].append(n_titulos)
            ops_inv_activa['titulos_c'].append(comprados)
            ops_inv_activa['precio'].append(pos_datos.loc[peso_max, 'Precio'])
            ops_inv_activa['comision'].append(pos_datos.loc[peso_max, 'Comision'])

    pos_datos['Precio_ant'] = pos_datos['Precio']
    pos_datos['Postura'] = np.round(pos_datos['Titulos'] * pos_datos['Precio'], 2)

    inv_activa['capital'].append(np.round(sum(pos_datos['Postura']) + cash, 2))
    comisiones.append(sum(pos_datos['Comision']))
    inv_activa['timestamp'].append(str(d_prices.index[a].strftime('%Y-%m-%d')))

pos_datos['Postura'] = np.round(pos_datos['Titulos'] * pos_datos['Precio'], 2)

df_activa = pd.DataFrame()
df_activa['timestamp'] = inv_activa['timestamp']
df_activa['capital'] = np.round(inv_activa['capital'], 2)
df_activa['rend'] = 0
df_activa['rend_acum'] = 0

df_activa = df_activa[df_activa['timestamp'].isin(df_pasiva['timestamp'])]
df_activa = df_activa.reset_index(drop=True)

for i in range(1, len(df_activa)):
    df_activa.loc[i, 'rend'] = np.round(np.log(df_activa.loc[i, 'capital'] / df_activa.loc[i - 1,
                                                                                           'capital']), 4)
    df_activa.loc[i, 'rend_acum'] = np.round(df_activa.loc[i - 1, 'rend_acum'] + df_activa.loc[i, 'rend'], 4)
df_operaciones = pd.DataFrame()

df_operaciones['timestamp'] = ops_inv_activa['timestamp']
df_operaciones['titulos_t'] = ops_inv_activa['titulos_t']
df_operaciones['titulos_c'] = ops_inv_activa['titulos_c']
df_operaciones['precio'] = ops_inv_activa['precio']
df_operaciones['comision'] = ops_inv_activa['comision']
df_operaciones = df_operaciones[:-1]

activa_graph = graph(x=df_activa['timestamp'], y=df_activa['capital'],
                     title="Inversión Activa: "+str(inv_activa['timestamp'][1])+" a "+str(inv_activa['timestamp'][-1]),
                     x_title='Dates', y_title="Capital")
# activa_graph.show()

comparative = pd.DataFrame()
comparative["timestamp"] = df_pasiva['timestamp']
comparative["Inversión Pasiva"] = df_pasiva['capital']
comparative["Inversión Activa"] = df_activa['capital']

inver_graphs = two_graph(x=df_pasiva['timestamp'], y=df_pasiva['capital'], name1="Inversión Pasiva",
                         x2=df_activa['timestamp'], y2=df_activa['capital'], name2="Inversión Activa",
                         title="Inversión Pasiva vs Activa: ",
                         x_title='Dates', y_title="Capital")
# inver_graphs.show()